#!/usr/bin/env bash

icon_pack=/usr/share/icons/MonoDev
sound_pack=/usr/share/sounds/MonoDev
user=$(who | head -n 1 | awk '{print $1}')
uid=$(id -u "$user")
wal_dir=/home/$user/.cache/wal/colors
icon_color=$(grep -oP '#.*([A-Za-z]|[0-9])' $icon_pack/main_color.svg)
DEVICES_LIST_FILE="/var/run/devify_connected_devices"
DEVICES_LIST_LOCK_FILE="/var/run/devify_connected_devices.lock"

DBUS_SESSION_BUS_ADDRESS=unix:path="/run/user/$uid/bus"
export DBUS_SESSION_BUS_ADDRESS
# required by Libcanberra
XDG_RUNTIME_DIR=/run/user/$uid
export XDG_RUNTIME_DIR
export DISPLAY=:0
export WAYLAND_DISPLAY=wayland-0

# wait until file is closed by previous event
while true; do
  if test -f "$DEVICES_LIST_LOCK_FILE"; then
    sleep .5
  else
    break
  fi
done

# set lock
touch "$DEVICES_LIST_LOCK_FILE"

declare -A device
device_full_name=""

# Build device name using passed environment variables from udev rule
function build_device_info() {
  local dev_name
  local dev_vendor="Unknown"
  if [[ -n "$ID_MODEL_FROM_DATABASE" ]]; then
    dev_name="$ID_MODEL_FROM_DATABASE"
  elif [[ -n "$ID_USB_MODEL" ]]; then
    dev_name="$ID_USB_MODEL"
  elif [[ -n "$ID_MODEL" ]]; then
    dev_name="$ID_MODEL"
  elif [[ -n "$NAME" ]]; then
    dev_name="$NAME"
  elif [[ -n "$ID_USB_CLASS_FROM_DATABASE" ]]; then
    dev_name="$ID_USB_CLASS_FROM_DATABASE"
  elif [[ -n "$PRODUCT" ]]; then
    dev_name="$PRODUCT"
  elif [[ -n "$POWER_SUPPLY_MODEL_NAME" ]]; then
    dev_name="$POWER_SUPPLY_MODEL_NAME"
  elif [[ -n "$POWER_SUPPLY_NAME" ]]; then
    dev_name="$POWER_SUPPLY_NAME"
  elif [[ -n "$DEVPATH" ]]; then
    dev_name="$(basename "$DEVPATH")"
  fi

  if [[ -n "$ID_VENDOR_FROM_DATABASE" ]]; then
    dev_vendor="$ID_VENDOR_FROM_DATABASE"
  elif [[ -n "$ID_USB_VENDOR" ]]; then
    dev_vendor="$ID_USB_VENDOR"
  elif [[ -n "$ID_VENDOR" ]]; then
    dev_vendor="$ID_VENDOR"
  elif [[ -n "$ID_VENDOR_ENC" ]]; then
    dev_vendor="$ID_VENDOR_ENC"
  elif [[ -n "$ID_VENDOR" ]]; then
    dev_vendor="$ID_VENDOR"
  elif [[ -n "$POWER_SUPPLY_MANUFACTURER" ]]; then
    dev_vendor="$POWER_SUPPLY_MANUFACTURER"
  fi

  # power supply special case
  if [[ "$POWER_SUPPLY_TYPE" == "Mains" ]]; then
    # overwrite action
    if [[ "$POWER_SUPPLY_ONLINE" == "1" ]]; then
      ACTION="add"
    elif [[ "$POWER_SUPPLY_ONLINE" == "0" ]]; then
      ACTION="remove"
    fi
  fi
  # remove underscores and double quotes
  dev_name="${dev_name//_/ }"
  dev_name="${dev_name//\"/}"
  dev_vendor="${dev_vendor//_/ }"
  dev_vendor="${dev_vendor//\"/}"

  device[name]="$dev_name"
  device[vendor]="$dev_vendor"
  device[type]="$DEVIFY_TYPE"
  device[desc]="$DEVIFY_DESC"
  device_full_name="$dev_vendor - $dev_name"
}
build_device_info

function notify() {
  if [[ "$ACTION" == "add" || "$ACTION" == "change" ]]; then
    action="Detected"
    sound="add"
  elif [[ "$ACTION" == "remove" ]]; then
    action="Removed"
    sound="remove"
  fi
  su "$user" -c "canberra-gtk-play -f ${sound_pack}/${sound}.oga -i 'Devify' -d '$action'" &
  su "$user" -c "notify-send -u low --hint=string:desktop-entry:devify -a 'Devify' -i ${icon_pack}/$3.svg '$2 $action' '$1'" &
}

# Change color by pywall
function update_pywall_color() {
  if test -f "$wal_dir"; then
    color=$(sed -n 3p "$wal_dir")
    if [ "$color" != "$icon_color" ]; then
      for i in "$icon_pack"/*; do
        sed -i "s/fill=\"#.*\"/fill=\"$color\"/g" "$i"
      done
    fi
  fi
}

# format notification text and icons
function push_notification() {
  local device_name="${device[vendor]}"
  local device_type="${device[type]}"
  local device_desc="${device[desc]}"
  local device_icon=""
  if [[ -n "${device[name]}" ]]; then
    if [[ -n "$device_name" ]]; then
      device_name+=" â€¢ ${device[name]}"
    else
      device_name+="${device[name]}"
    fi
  fi

  shopt -s nocasematch
  # special input device icons here
  case "$device_name" in
    *"DualSense"*)
      device_icon="ps5_controller"
      ;;
    *"DualShock"*)
      device_icon="ps4_controller"
      ;;
    *"Pro Controller"*)
      device_icon="switch_pro_controller"
      ;;
    *"Katar"*)
      device_icon="corsair"
      ;;
    *"Keyboard"*)
      device_icon="generic_keyboard"
      ;;
    *"Mouse"* | *"Logitech MX"* | *"MX Master"*)
      device_icon="generic_mouse"
      ;;
    *"X-Box"* | *"Xbox"*)
      device_icon="xbox_controller"
      ;;
    *"Yubico Yubikey"*)
      device_icon="yubikey"
      ;;
    *"Cam"*)
      device_icon="webcam"
      ;;
  esac
  case "$device_type" in
    *"removable_drive"*)
      device_icon="removable_drive"
      ;;
    *"android_device"*)
      device_icon="android"
      ;;
    *"serial_device"*)
      # special serial device icons here
      case "$device_name" in
        *"Arduino"*)
          device_icon="arduino"
          ;;
        *)
          device_icon="generic_serial"
          ;;
      esac
      ;;
    *"power_adapter"*)
      if [[ "$ACTION" == "add" ]];then
        device_icon=power_adapter_in
      else
        device_icon=power_adapter_out
      fi
      ;;
    *"sound_card"*)
      device_icon="sound_card"
      ;;
    *"network_adapter"*)
      device_icon="network_adapter"
      ;;
    *"video_device"*)
      device_icon="webcam"
      ;;
  esac

  notify "$device_name" "$device_desc" "$device_icon"
  shopt -u nocasematch
}


# Get devices list from file into an array
old_IFS="$IFS"
if ! test -f "$DEVICES_LIST_FILE"; then
  connected_list=()
else
  connected_list=()
  devices=$(cat "$DEVICES_LIST_FILE")
  while IFS= read -r line; do
    connected_list+=("$line")
  done <<<"$devices"
  IFS="$old_IFS"
fi

# On add device (and change for special case)
event_handled=0
if [[ -n "$device_full_name" ]] && [[ "$ACTION" == "add" || "$ACTION" == "change" || "$ACTION" == "bind" ]]; then
  echo "$device_full_name $ACTION" >> /tmp/devify-event.log
  if [[ ! " ${connected_list[*]} " == *"${device_full_name}"* ]]; then
    event_handled=1
    update_pywall_color
    push_notification
    connected_list+=("$device_full_name")
    printf "%s\n" "${connected_list[@]}" >"$DEVICES_LIST_FILE"
  fi

# On remove device
elif [[ -n "$device_full_name" ]] && [[ "$ACTION" == "remove" ]]; then
  echo "$device_full_name $ACTION" >> /tmp/devify-event.log
  # Find and remove the device
  for i in "${!connected_list[@]}"; do
    if [[ "${connected_list[i]}" == *"$device_full_name"* ]]; then
      event_handled=1
      unset 'connected_list[i]'
      update_pywall_color
      push_notification
      break
    fi
  done
  # Re-index the array
  connected_list=("${connected_list[@]}")
fi

if [[ "$event_handled" == 1 ]];then
  echo "$(date -u '+%Y-%m-%d %H:%M:%S.%3N') [I] $device_full_name $ACTION - Handled" >> /tmp/devify-event.log
else
  echo "$(date -u '+%Y-%m-%d %H:%M:%S.%3N') [D] $device_full_name $ACTION - Ignored" >> /tmp/devify-event.log
fi

# Update file
printf "%s\n" "${connected_list[@]}" >"$DEVICES_LIST_FILE"
# remove lock
rm "$DEVICES_LIST_LOCK_FILE"
